R Nuts and Bolts: Getting Started
========================================================
author: Pier Lorenzo Paracchini
date: 20.09.2017
width: 1440
height: 900
font-import: http://fonts.googleapis.com/css?family=Risque
font-family: 'Risque'

How To Run R
========================================================

R actually can operate in two modes:
- _interactive mode_ and
- _batch mode_.

The _interactive mode_  requires an interaction with the user:
- a R session is started,
- the user types in/ executes a command or a set of commands,
- R displays the result and so on.

The _batch mode_ does not require interaction with the user and it is useful for
- __pipelines__, __production and automated jobs__ and __reproducible research__.

Some Basic Information
========================================================

- __Commnet__: the `#` character indicates a __comment__. Anything to the right of the `#` (including the `#` itself) is ignored.

<font size = "5px">
```{r collapse = T}
# This is a comment
```
</font>

__Variables__: R does __not require variable types to be declared__.
- A variable can take on any available data type (at any point)
- Variable assignment is performed using the assignment operator `<-` or `assign` function.
    - the `=` operator is discouraged cause does not work in special situation (historical reason).

<font size = "5px">
```{r collapse = T}
x <- 1 # Assign 1 to x
x

x <- "hello" # Assign "hello" to x
x

assign("j", 4)
j
```
</font>


Some Basic Information (Cont'd)
========================================================

__Complete expressions__, the __grammar of the language__ determines whether an expression is complete or not.
- When a __complete expression__ is entered at the prompt, it is evaluated/ executed.

<font size = "5px">
```{r collapse = T}
# complete expression
x <- 1
```

```{r eval = F}
# Incomplete expression - you will be asked to continue in the next line (+)
x <-
+
```
</font>

__Printing__, auto-printing vs. explicit printing

<font size = "5px">
```{r collapse = T}
x <- 5  # Assignment - nothing printed
x # auto-printing occurs, normally used when working in interaction mode

print(x)  # explicit printing, normally used when working within function
```
</font>

Operators: Arithmetic operators
========================================================

These unary and binary operators perform arithmetic on numeric or complex vectors (or objects which can be coerced to them).
- See `?Arithmetic` for more information.

<font size = "5px">
```{r eval = F}
+ x
- x
x + y
x - y
x * y
x / y
x ^ y
x %% y
x %/% y
```
</font>

Operators: Logical operators
========================================================

These operators act on raw, logical and number-like vectors.
- See `?Logical` for more information.

<font size = "5px">
```{r eval = F}
! x
x & y #  elementwise comparisons
x && y # only the first element of vectors
x | y
x || y
xor(x, y)

isTRUE(x)
```
</font>


A First R Session: Hands-On
========================================================

<font size = "5px">
```r
# Exe1: Use as a calculator
# Perform some basic calculation
> 5 + 3
> 5 %% 2
> 5 %/% 2

# Exe2: Assignments & Printing
# Perform some assignments
> x <- 5 + 2
> x # Show the content of x
> x <- "A string" # the type can be changed
> x

# Exe3: Assignments & Printing
# Create a vector and assign to x
> x <- c(1,2,3)
> x # show the content of x
# Create a new vector y based on x
> y <- c(x,4,x)
# show the content of y & its length
> print(y)
> length(y)

# Exe4: Subsetting
# Get 2nd to 4th elements of y
> y[2:4]
```
</font>

A First R Session: Hands-On (Cont'd)
========================================================

<font size = "5px">
```r
# Exe5: Logical Conditions
> x <- TRUE
> !x
> y <- FALSE
> x & y
> x | y

# Exe6: Explore the data available in R
# Perform some visualization and statistics
> data() # Show the available datasets (default)

> ?Nile # Nile dataset - what is it about?
> View(Nile) # Show its content

> hist(Nile) # plot an histogram of Nile dataset

> mean(Nile) #calculate the mean and standard deviation
> sd(Nile) #calculate the standard deviation
> quantile(Nile)
```
</font>

Hands-On (Optional)
========================================================

```r
library(swirl)
swirl()
#.....
# Select the "R Programming" entry
# Select the "Basic Building Blocks" entry [1]
```
