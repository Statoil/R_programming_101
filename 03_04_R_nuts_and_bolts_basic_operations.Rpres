R Nuts and Bolts: Basic Operations
========================================================
author: Pier Lorenzo Paracchini
date: 20.09.2017
width: 1440
height: 900
font-import: http://fonts.googleapis.com/css?family=Risque
font-family: 'Risque'
transition: rotate

Subsetting (Recap)
========================================================

There are different operators that can be used to extract subsets of R objects.

- `[` always returns an object of the same class as the original; can be used to select more than one element

- `[[` is used to extract elements of a list or a data frame; it can only be used to extract a single element and the class of the returned object will not necessarily be a list or data frame

- `$` is used to extract elements of a list or data frame by name; semantics are similar to that of `[[`.

Subsetting (Recap) - Cont'd
========================================================
__Subsetting a Vector__

<font size = "5px">
```{r collapse = T}
x <- c("a", "b", "c", "c", "d", "a")

# Using an index
x[1]

x[2]

x[1:4]

# Using a boolean condition
x[x > "a"]

u <- x > "a"
u

x[u]
```
</font>

Subsetting (Recap) - Cont'd
========================================================

__Subsetting a Matrix__

By default, when elements of a matrix are retrieved a vector is returned rather than a matrix. This behavior can be turned off by setting `drop = FALSE`.

<font size = "5px">
```{r collapse = T}
x <- matrix(1:6, 2, 3)

#Get the element in the first row, second col
x[1, 2]

#Get the element in the second row, first col
x[2, 1]
```
</font>

<font size = "5px">
```{r collapse = T}
# Get all of the elements in the first row
x[1, ]

x[1, , drop = FALSE]

# Get all of the elements in the second col
x[, 2]
```
</font>

Subsetting (Recap) - Cont'd
========================================================
__Subsetting a List__

<font size = "5px">
```{r collapse = T}
x <- list(foo = 1:4, bar = 0.6, baz = "hello")

x[1] # x["foo"]

x[[1]] # x[["foo"]] # x$foo

x[c(1, 3)]
```
</font>

The `[[` operator can be used with _computed_ indices, while `$` can only be used with literal names.

<font size = "5px">
```{r collapse = T}
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
name <- "foo"
x[[name]]  ## computed index for ‘foo’

x$name     ## element ‘name’ doesn’t exist!
```
</font>

Partial matching of names is allowed with `[[` and `$`.

Subsetting (Recap) - Cont'd
========================================================
__Subsetting a Data Frame__

<font size = "5px">
```{r collapse = T}
df <- data.frame(x = c(1,2,3), y = c("a", "b", "c"),
                 z = c(T,F,F), stringsAsFactors = F)
df[1,] # First Observation

df[,2] # 2nd feature (y)

df[["x"]] # df[[1]] # observation x as original type

df$x

```
</font>

More Hands-On (Optional)
========================================================

```{r eval = F}
library(swirl)
swirl()
#.....
# Select the "R Programming" entry
# Select the "Subsetting Vectors" entry [6]
```


Removing NAs
========================================================

A common task is to remove missing values (`NA`s).

<font size = "5px">
```{r collapse = T}
x <- c(1, 2, NA, 4, NA, 5)
bad <- is.na(x)
x[!bad]
```
</font>


<font size = "5px">
```{r collapse = T}
airquality[1:6, ]

good <- complete.cases(airquality)
#A logical vector which observations/rows have no missing values

airquality[good, ][1:6, ]
```
</font>

Hands-On (10 minutes)
========================================================

```{r eval = F}
library(swirl)
swirl()
#.....
# Select the "R Programming" entry
# Select the "Missing Values" entry [5]
```

Built-in functions: Numeric functions
========================================================

- `abs(x)`, the absolute value
- `sqrt(x)`, the square root
- `ceiling(x)`, ceiling(3.475) is 4
- `floor(x)`, floor(3.475) is 3
- `trunc(x)`, trunc(3.99) is 3
- `round(x, digits = n)`, round(3.475, 2) is 3.48
- ...

Built-in functions: Character functions
========================================================

- `paste(..., sep = "")`, concatenate strings with a specific separator
    - (see `?paste` for more info)

<font size = "5px">
```{r collapse = TRUE}
paste("My", "name", "is", "...", sep = " ")

paste("id", 1:3, sep = "_")
```
</font>

- `grep(pattern, x, ...)`, search for pattern in x
    - (see `?grep` for more info)

<font size = "5px">
```{r collapse = TRUE}
grep("a", c("A", "a", "b", "a", "C"), fixed = TRUE)

grep("a", c("A", "a", "b", "a", "C"), ignore.case = TRUE)
```
</font>

Built-in functions: Statistical functions
========================================================

- `rnorm()`, the normal distribution
- `dunif()`, the uniform distribution
- `mean()`, the mean
- `sd()`, the standard deviation
- and much more ...

__A more comprehensive list of built-in functions__
- From "R in Action": http://www.statmethods.net/management/functions.html

`str` and `summary` functions
========================================================

- The `str` function displays the internal structure of an R object, mostly used as a diagnostic function.

<font size = "5px">
```{r collapse = TRUE}
str(mtcars)
```
</font>

- The `summary` function is a generic function used to produce summaries/ basic statistics for the provided R object.

<font size = "5px">
```{r collapse = TRUE}
summary(mtcars[,1:3])
```
</font>
